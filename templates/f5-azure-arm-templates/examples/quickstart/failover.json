{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "7.2.0.0",
    "parameters": {
        "templateBaseUrl": {
            "allowedValues": [
                "https://raw.githubusercontent.com/edwoodjrjr/scriptdump/master/",
                "https://cdn.f5.com/product/cloudsolutions/"
            ],
            "defaultValue": "https://cdn.f5.com/product/cloudsolutions/",
            "metadata": {
                "description": "Location where linked templates are stored."
            },
            "type": "string"
        },
        "adminUsername": {
            "defaultValue": "azureuser",
            "metadata": {
                "description": "User name for the Virtual Machine."
            },
            "type": "string"
        },
        "sshKey": {
            "metadata": {
                "description": "SSH public key to login to the Virtual Machine. Note: This should be the public key as a string, typically starting with **---- BEGIN SSH2 PUBLIC KEY ----** and ending with **---- END SSH2 PUBLIC KEY ----**."
            },
            "type": "securestring"
        },
        "dnsLabel": {
            "metadata": {
                "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine."
            },
            "type": "string"
        },
        "instanceName": {
            "defaultValue": "f5vm01",
            "metadata": {
                "description": "Name of the Virtual Machine."
            },
            "type": "string"
        },
        "numberOfExternalIps": {
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20
            ],
            "defaultValue": 1,
            "metadata": {
                "description": "The number of public/private IP addresses you want to deploy for the application traffic (external) NIC on the BIG-IP VE to be used for virtual servers."
            },
            "type": "int"
        },
        "instanceType": {
            "allowedValues": [
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_D15_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS11_v2",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_DS15_v2",
                "Standard_F4",
                "Standard_F8",
                "Standard_F4S",
                "Standard_F8S",
                "Standard_F16S",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5"
            ],
            "defaultValue": "Standard_DS3_v2",
            "metadata": {
                "description": "Instance size of the Virtual Machine."
            },
            "type": "string"
        },
        "imageName": {
            "allowedValues": [
                "LTMTwoBootLocations",
                "AllTwoBootLocations"
            ],
            "defaultValue": "AllTwoBootLocations",
            "metadata": {
                "description": "F5 SKU (image) you want to deploy. Note: The disk size of the VM will be determined based on the option you select.  **Important**: If intending to provision multiple modules, ensure the appropriate value is selected, such as ****AllTwoBootLocations or AllOneBootLocation****."
            },
            "type": "string"
        },
        "bigIpVersion": {
            "allowedValues": [
                "15.0.100000",
                "14.1.200000",
                "latest"
            ],
            "defaultValue": "15.0.100000",
            "metadata": {
                "description": "F5 BIG-IP version you want to use."
            },
            "type": "string"
        },
        "licenseKey1": {
            "defaultValue": "",
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL)."
            },
            "type": "string"
        },
        "licenseKey2": {
            "defaultValue": "",
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL). This field is required when deploying two or more devices."
            },
            "type": "string"
        },
        "vnetName": {
            "metadata": {
                "description": "The name of the existing virtual network to which you want to connect the BIG-IP VEs."
            },
            "type": "string"
        },
        "vnetResourceGroupName": {
            "metadata": {
                "description": "The name of the resource group that contains the Virtual Network where the BIG-IP VE will be placed."
            },
            "type": "string"
        },
        "mgmtSubnetName": {
            "metadata": {
                "description": "Name of the existing mgmt subnet - with external access to the Internet. **Important**: The subnet you provide for the mgmt NIC **must** be unique."
            },
            "type": "string"
        },
        "mgmtIpAddressRangeStart": {
            "metadata": {
                "description": "The static private IP address you want to assign to the management self IP of the first BIG-IP. The next contiguous address will be used for the second BIG-IP device."
            },
            "type": "string"
        },
        "externalSubnetName": {
            "metadata": {
                "description": "Name of the existing external subnet - with external access to Internet. **Important**: The subnet you provide for the external NIC **must** be unique."
            },
            "type": "string"
        },
        "externalIpAddressRangeStart": {
            "metadata": {
                "description": "The static private IP address (secondary) you would like to assign to the first shared Azure public IP. An additional private IP address will be assigned for each public IP address you specified in numberOfExternalIps.  For example, inputting 10.100.1.50 here and choosing 2 in numberOfExternalIps would result in 10.100.1.50 and 10.100.1.51 being configured as static private IP addresses for external virtual servers."
            },
            "type": "string"
        },
        "externalIpSelfAddressRangeStart": {
            "metadata": {
                "description": "The static private IP address you want to assign to the external self IP (primary) of the first BIG-IP VE. The next contiguous address will be used for the second BIG-IP device."
            },
            "type": "string"
        },
        "internalSubnetName": {
            "metadata": {
                "description": "Name of the existing internal subnet. **Important**: The subnet you provide for the internal NIC **must** be unique."
            },
            "type": "string"
        },
        "internalIpAddressRangeStart": {
            "metadata": {
                "description": "The static private IP address you would like to assign to the internal self IP of the first BIG-IP VE. The next contiguous address will be used for the second BIG-IP device."
            },
            "type": "string"
        },
        "provisionPublicIP": {
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes",
            "metadata": {
                "description": "Provision Public IP addresses for BIG-IP Network Interfaces. By default it is set to provision public IPs"
            },
            "type": "string"
        },
        "customImage": {
            "defaultValue": "OPTIONAL",
            "metadata": {
                "description": "If you would like to deploy using a local BIG-IP image, provide either the full URL to the VHD in Azure storage **or** the full resource ID to an existing Microsoft.Compute image resource.  **Note**: Unless specifically required, leave the default of **OPTIONAL**."
            },
            "type": "string"
        },
        "restrictedSrcAddress": {
            "defaultValue": "*",
            "metadata": {
                "description": "This field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources"
            },
            "type": "string"
        },
        "tagValues": {
            "defaultValue": {
                "application": "APP",
                "cost": "COST",
                "environment": "ENV",
                "group": "GROUP",
                "owner": "OWNER"
            },
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            },
            "type": "object"
        },
        "numberOfAdditionalNics": {
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5
            ],
            "defaultValue": 0,
            "metadata": {
                "description": "By default this solution deploys the BIG-IP(s) in a 3 NIC configuration, however additional NICs can be added to the BIG-IP(s) using this parameter.  **Note**: The default value is 0, additional NICs will only be created if 1 or higher is specified."
            },
            "type": "int"
        },
        "additionalNicLocation": {
            "defaultValue": "OPTIONAL",
            "metadata": {
                "description": "This parameter specifies where the additional NICs go, use the default value of **OPTIONAL** if **0** was selected for the parameter **numberOfAdditionalNics**.  Otherwise this value must be a semi-colon delimited string of subnets, equal to the number of additional NICs being deployed.  For example, for 2 additional NICs you would use: **subnet01;subnet02**. **Note**: Ensure there are no spaces and the correct number of subnets are provided based on the value selected in **numberOfAdditionalNics**. **Important**: The subnet you provide for each additional NIC **must** be unique."
            },
            "type": "string"
        },
        "provisionApp": {
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes",
            "metadata": {
                "description": "Choose yes to deploy app server resources."
            },
            "type": "string"
        }
    },
    "variables": {
        "addtlNicFillerArray": [
            "filler01",
            "filler02",
            "filler03",
            "filler04",
            "filler05"
        ],
        "addtlNicRefSplit": "[concat(split(parameters('additionalNicLocation'), ';'), variables('addtlNicFillerArray'))]",
        "selfNicConfigArray": {
            "0": [
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('mgmtNicName'), '0'))]",
                    "properties": {
                        "primary": true
                    }
                },
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('extNicName'), '0'))]",
                    "properties": {
                        "primary": false
                    }
                },
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('intNicName'), '0'))]",
                    "properties": {
                        "primary": false
                    }
                }
            ],
            "1": [
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('mgmtNicName'), '1'))]",
                    "properties": {
                        "primary": true
                    }
                },
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('extNicName'), '1'))]",
                    "properties": {
                        "primary": false
                    }
                },
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('intNicName'), '1'))]",
                    "properties": {
                        "primary": false
                    }
                }
            ]
        },
        "addtlNicConfigArray": {
            "copy": [
                {
                    "count": 5,
                    "input": {
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(toLower(parameters('dnsLabel')), '-addtlnic', copyIndex('values0', 1), '0'))]",
                        "properties": {
                            "primary": false
                        }
                    },
                    "name": "values0"
                },
                {
                    "count": 5,
                    "input": {
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(toLower(parameters('dnsLabel')), '-addtlnic', copyIndex('values1', 1), '1'))]",
                        "properties": {
                            "primary": false
                        }
                    },
                    "name": "values1"
                }
            ]
        },
        "addtlNicName": "[concat(variables('dnsLabel'), '-addtlnic')]",
        "bigIpNicPortMap": {
            "1": {
                "Port": "[parameters('bigIpVersion')]"
            },
            "2": {
                "Port": "443"
            },
            "3": {
                "Port": "443"
            },
            "4": {
                "Port": "443"
            },
            "5": {
                "Port": "443"
            },
            "6": {
                "Port": "443"
            }
        },
        "bigIpVersionPortMap": {
            "15.0.100000": {
                "Port": 8443
            },
            "14.1.200000": {
                "Port": 8443
            },
            "443": {
                "Port": 443
            },
            "latest": {
                "Port": 8443
            }
        },
        "computeApiVersion": "2017-12-01",
        "networkApiVersion": "2017-11-01",
        "storageApiVersion": "2017-10-01",
        "customImage": "[replace(parameters('customImage'), 'OPTIONAL', '')]",
        "useCustomImage": "[not(empty(variables('customImage')))]",
        "isAcceleratedNetworkingSupported": "[if(not(contains(parameters('bigIpVersion'),  '14.1.200000')), bool('true'), bool('false'))]",
        "createNewCustomImage": "[contains(variables('customImage'), 'https://')]",
        "newCustomImageName": "[concat(variables('dnsLabel'), 'image')]",
        "storageProfileArray": {
            "customImage": {
                "imageReference": {
                    "id": "[if(variables('createNewCustomImage'), resourceId('Microsoft.Compute/images', variables('newCustomImageName')), variables('customImage'))]"
                }
            },
            "platformImage": {
                "imageReference": "[variables('imageReference')]",
                "osDisk": {
                    "createOption": "FromImage"
                }
            }
        },
        "premiumInstanceArray": [
            "Standard_DS2",
            "Standard_DS3",
            "Standard_DS4",
            "Standard_DS11",
            "Standard_DS12",
            "Standard_DS13",
            "Standard_DS14",
            "Standard_DS2_v2",
            "Standard_DS3_v2",
            "Standard_DS4_v2",
            "Standard_DS5_v2",
            "Standard_DS11_v2",
            "Standard_DS12_v2",
            "Standard_DS13_v2",
            "Standard_DS14_v2",
            "Standard_DS15_v2",
            "Standard_F2S",
            "Standard_F4S",
            "Standard_F8S",
            "Standard_F16S",
            "Standard_GS2",
            "Standard_GS3",
            "Standard_GS4",
            "Standard_GS5"
        ],
        "location": "[resourceGroup().location]",
        "sshKey": "[replace(parameters('sshKey'),'\\n', '\n')]",
        "subscriptionID": "[subscription().subscriptionId]",
        "resourceGroupName": "[resourceGroup().name]",
        "singleQuote": "'",
        "f5NetworksTag": "v7.2.0.0",
        "dnsLabel": "[toLower(parameters('dnsLabel'))]",
        "imageNameToLower": "[toLower(parameters('imageName'))]",
        "skuToUse": "[concat('f5-', variables('imageNameSub'),'-byol')]",
        "offerToUse": "[concat('f5-big-ip-', variables('imageNameArray').offerPostfix[variables('imageNameSub')])]",
        "imagePlan": {
            "name": "[variables('skuToUse')]",
            "product": "[variables('offerToUse')]",
            "publisher": "f5-networks"
        },
        "imageReference": {
            "offer": "[variables('offerToUse')]",
            "publisher": "f5-networks",
            "sku": "[variables('skuToUse')]",
            "version": "[parameters('bigIpVersion')]"
        },
        "bigIpNicPortValue": "[variables('bigIpNicPortMap')['3'].Port]",
        "bigIpMgmtPort": "[variables('bigIpVersionPortMap')[variables('bigIpNicPortValue')].Port]",
        "instanceName": "[toLower(parameters('instanceName'))]",
        "virtualNetworkName": "[parameters('vnetName')]",
        "mgmtSubnetName": "[parameters('mgmtSubnetName')]",
        "vnetId": "[resourceId(parameters('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "mgmtSubnetPrivateAddress": "[parameters('mgmtIpAddressRangeStart')]",
        "extSubnetPrivateAddressSuffixInt": "[int(variables('extSubnetPrivateAddressPrefixArray')[3])]",
        "extSubnetName": "[parameters('externalSubnetName')]",
        "extSubnetPrivateAddress": "[parameters('externalIpSelfAddressRangeStart')]",
        "extSubnetPrivateAddressPrefix": "[concat(variables('extSubnetPrivateAddressPrefixArray')[0], '.', variables('extSubnetPrivateAddressPrefixArray')[1], '.', variables('extSubnetPrivateAddressPrefixArray')[2], '.')]",
        "extNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-ext-nsg'))]",
        "extSelfPublicIpAddressNamePrefix": "[concat(variables('dnsLabel'), '-self-pip')]",
        "extSelfPublicIpAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extSelfPublicIpAddressNamePrefix'))]",
        "extpublicIPAddressNamePrefix": "[concat(variables('dnsLabel'), '-ext-pip')]",
        "extPublicIPAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extPublicIPAddressNamePrefix'))]",
        "extNicName": "[concat(variables('dnsLabel'), '-ext')]",
        "extSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('extsubnetName'))]",
        "intSubnetName": "[parameters('internalSubnetName')]",
        "intSubnetPrivateAddress": "[parameters('internalIpAddressRangeStart')]",
        "intNicName": "[concat(variables('dnsLabel'), '-int')]",
        "intSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('intsubnetName'))]",
        "mgmtSubnetPrivateAddress1": "[concat(variables('mgmtSubnetPrivateAddressPrefix'), variables('mgmtSubnetPrivateAddressSuffix'))]",
        "extSubnetPrivateAddress1": "[concat(variables('extSubnetSelfPrivateAddressPrefix'), variables('extSubnetSelfPrivateAddressSuffix'))]",
        "intSubnetPrivateAddress1": "[concat(variables('intSubnetPrivateAddressPrefix'), variables('intSubnetPrivateAddressSuffix'))]",
        "availabilitySetName": "[concat(variables('dnsLabel'), '-avset')]",
        "zoneMappings": "[replace(toLower(string(providers('Microsoft.Compute', 'virtualMachines').zoneMappings)), ' ', '')]",
        "southcentralus": "[equals(variables('location'), string('southcentralus'))]",
        "southafricanorth": "[equals(variables('location'), string('southafricanorth'))]",
        "australiaeast": "[equals(variables('location'), string('australiaeast'))]",
        "zonesAvailable": "[and(contains(variables('zoneMappings'), concat('\"', variables('location'), '\"')), not(variables('southcentralus')), not(variables('southafricanorth')), not(variables('australiaeast')))]",
        "availabilitySetId": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "extSubnetPrivateAddressPrefixArray": "[split(parameters('externalIpAddressRangeStart'), '.')]",
        "extSubnetPrivateAddressSuffix0": "[add(variables('extSubnetPrivateAddressSuffixInt'), 1)]",
        "extSubnetPrivateAddressSuffix1": "[add(variables('extSubnetPrivateAddressSuffixInt'), 2)]",
        "extSubnetRef": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/', parameters('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('externalSubnetName'))]",
        "intSubnetRef": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/', parameters('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('internalSubnetName'))]",
        "mgmtSubnetPrivateAddressPrefixArray": "[split(parameters('mgmtIpAddressRangeStart'), '.')]",
        "mgmtSubnetPrivateAddressPrefix": "[concat(variables('mgmtSubnetPrivateAddressPrefixArray')[0], '.', variables('mgmtSubnetPrivateAddressPrefixArray')[1], '.', variables('mgmtSubnetPrivateAddressPrefixArray')[2], '.')]",
        "mgmtSubnetPrivateAddressSuffixInt": "[int(variables('mgmtSubnetPrivateAddressPrefixArray')[3])]",
        "mgmtSubnetPrivateAddressSuffix": "[add(variables('mgmtSubnetPrivateAddressSuffixInt'), 1)]",
        "extSubnetSelfPrivateAddressPrefixArray": "[split(parameters('externalIpSelfAddressRangeStart'), '.')]",
        "extSubnetSelfPrivateAddressPrefix": "[concat(variables('extSubnetSelfPrivateAddressPrefixArray')[0], '.', variables('extSubnetSelfPrivateAddressPrefixArray')[1], '.', variables('extSubnetSelfPrivateAddressPrefixArray')[2], '.')]",
        "extSubnetSelfPrivateAddressSuffixInt": "[int(variables('extSubnetSelfPrivateAddressPrefixArray')[3])]",
        "extSubnetSelfPrivateAddressSuffix": "[add(variables('extSubnetSelfPrivateAddressSuffixInt'), 1)]",
        "intSubnetPrivateAddressPrefixArray": "[split(parameters('internalIpAddressRangeStart'), '.')]",
        "intSubnetPrivateAddressPrefix": "[concat(variables('intSubnetPrivateAddressPrefixArray')[0], '.', variables('intSubnetPrivateAddressPrefixArray')[1], '.', variables('intSubnetPrivateAddressPrefixArray')[2], '.')]",
        "intSubnetPrivateAddressSuffixInt": "[int(variables('intSubnetPrivateAddressPrefixArray')[3])]",
        "intSubnetPrivateAddressSuffix": "[add(variables('intSubnetPrivateAddressSuffixInt'), 1)]",
        "numberOfExternalIps": "[parameters('numberOfExternalIps')]",
        "imageNameSub": "[variables('imageNameArray')[parameters('bigIpVersion')][parameters('imageName')]]",
        "imageNameArray": {
            "15.0.100000": {
                "AllOneBootLocation": "big-all-1slot",
                "AllTwoBootLocations": "big-all-2slot",
                "LTMOneBootLocation": "big-ltm-1slot",
                "LTMTwoBootLocations": "big-ltm-2slot"
            },
            "14.1.200000": {
                "AllOneBootLocation": "big-all-1slot",
                "AllTwoBootLocations": "big-all-2slot",
                "LTMOneBootLocation": "big-ltm-1slot",
                "LTMTwoBootLocations": "big-ltm-2slot"
            },
            "latest": {
                "AllOneBootLocation": "big-all-2slot",
                "AllTwoBootLocations": "big-all-2slot",
                "LTMOneBootLocation": "big-ltm-2slot",
                "LTMTwoBootLocations": "big-ltm-2slot"
            },
            "offerPostfix": {
                "big-all-1slot": "byol",
                "big-all-2slot": "byol",
                "big-ltm-1slot": "byol",
                "big-ltm-2slot": "byol",
                "bigip-virtual-edition-best": "best",
                "bigip-virtual-edition-good": "good"
            }
        },
        "publicIPAddressType": "Static",
        "mgmtPublicIPAddressName": "[concat(variables('dnsLabel'), '-mgmt-pip')]",
        "mgmtPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('mgmtPublicIPAddressName'))]",
        "mgmtNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-mgmt-nsg'))]",
        "mgmtNicName": "[concat(variables('dnsLabel'), '-mgmt')]",
        "mgmtNicID": "[resourceId('Microsoft.Network/NetworkInterfaces', variables('mgmtNicName'))]",
        "mgmtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('mgmtSubnetName'))]",
        "tagValues": "[parameters('tagValues')]",
        "newDataStorageAccountName": "[concat(uniqueString(variables('dnsLabel'), resourceGroup().id, deployment().name), 'data000')]",
        "dataStorageAccountType": "Standard_LRS",
        "deploymentId": "[concat(variables('subscriptionId'), resourceGroup().id, deployment().name, variables('dnsLabel'))]"
    },
    "resources": [
        {
            "condition": "[equals(parameters('provisionPublicIP'),'Yes')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtPublicIPAddressName'), '0')]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), '-0')]"
                },
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "condition": "[equals(parameters('provisionPublicIP'),'Yes')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtPublicIPAddressName'), '1')]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), '-1')]"
                },
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "condition": "[equals(parameters('provisionPublicIP'),'Yes')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "location": "[variables('location')]",
            "name": "[concat(variables('extSelfPublicIpAddressNamePrefix'), '0')]",
            "properties": {
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "condition": "[equals(parameters('provisionPublicIP'),'Yes')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "location": "[variables('location')]",
            "name": "[concat(variables('extSelfPublicIpAddressNamePrefix'), '1')]",
            "properties": {
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "condition": "[and(equals(parameters('provisionPublicIP'),'Yes'), not(equals(variables('numberOfExternalIps'),0)))]",
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "copy": {
                "count": "[if(not(equals(variables('numberOfExternalIps'), 0)), variables('numberOfExternalIps'), 1)]",
                "name": "extpipcopy"
            },
            "location": "[variables('location')]",
            "name": "[concat(variables('extPublicIPAddressNamePrefix'), copyIndex())]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), copyIndex(0))]"
                },
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('mgmtNsgID')]",
                "[concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'), '0')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '0')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabel'), '-mgmt-ipconfig')]",
                        "properties": {
                            "PublicIpAddress": "[if(equals(parameters('provisionPublicIP'),'No'), json('null'), json(concat('{\"Id\": \"', variables('mgmtPublicIPAddressId'), '0', '\"}')))]",
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgID')]"
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "[variables('mgmtNsgID')]",
                "[concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'), '1')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '1')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabel'), '-mgmt-ipconfig')]",
                        "properties": {
                            "PublicIpAddress": "[if(equals(parameters('provisionPublicIP'),'No'), json('null'), json(concat('{\"Id\": \"', variables('mgmtPublicIPAddressId'), '1', '\"}')))]",
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress1')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgID')]"
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "extpipcopy",
                "[variables('extNsgID')]",
                "[concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '0')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('extNicName'), '0')]",
            "properties": {
                "copy": [
                    {
                        "count": "[add(variables('numberOfExternalIps'), 1)]",
                        "input": {
                            "name": "[if(equals(copyIndex('ipConfigurations'), 0), concat(variables('instanceName'), '-self-ipconfig'), concat(variables('resourceGroupName'), '-ext-ipconfig', sub(copyIndex('ipConfigurations'), 1)))]",
                            "properties": {
                                "PublicIpAddress": "[if(equals(parameters('provisionPublicIP'),'No'), json('null'), json(concat('{\"Id\": \"', if(equals(copyIndex('ipConfigurations'), 0), concat(variables('extSelfPublicIpAddressIdPrefix'), '0'), concat(variables('extPublicIPAddressIdPrefix'), sub(copyIndex('ipConfigurations'), 1))), '\"}')))]",
                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), 'True', 'False')]",
                                "privateIPAddress": "[if(equals(copyIndex('ipConfigurations'), 0), variables('extSubnetPrivateAddress'), concat(variables('extSubnetPrivateAddressPrefix'), add(variables('extSubnetPrivateAddressSuffixInt'), sub(copyIndex('ipConfigurations'), 1))))]",
                                "privateIPAllocationMethod": "Static",
                                "subnet": {
                                    "id": "[variables('extSubnetId')]"
                                }
                            }
                        },
                        "name": "ipConfigurations"
                    }
                ],
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "networkSecurityGroup": {
                    "id": "[concat(variables('extNsgID'))]"
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "extpipcopy",
                "[variables('extNsgID')]",
                "[concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '1')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('extNicName'), '1')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('instanceName'), '-self-ipconfig')]",
                        "properties": {
                            "PublicIpAddress": "[if(equals(parameters('provisionPublicIP'),'No'), json('null'), json(concat('{\"Id\": \"', concat(variables('extSelfPublicIpAddressIdPrefix'), '1'), '\"}')))]",
                            "primary": true,
                            "privateIPAddress": "[variables('extSubnetPrivateAddress1')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('extSubnetId')]"
                            }
                        }
                    }
                ],
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "networkSecurityGroup": {
                    "id": "[concat(variables('extNsgID'))]"
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "extpipcopy",
                "[variables('extNsgID')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('intNicName'), '0')]",
            "properties": {
                "enableIPForwarding": true,
                "primary": true,
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabel'), '-int-ipconfig')]",
                        "properties": {
                            "privateIPAddress": "[variables('intSubnetPrivateAddress')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
                "extpipcopy",
                "[variables('extNsgID')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('intNicName'), '1')]",
            "properties": {
                "enableIPForwarding": true,
                "primary": true,
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabel'), '-int-ipconfig')]",
                        "properties": {
                            "privateIPAddress": "[variables('intSubnetPrivateAddress1')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "condition": "[greaterOrEquals(parameters('numberOfAdditionalNics'), 1)]",
            "copy": {
                "count": "[if(greaterOrEquals(parameters('numberOfAdditionalNics'), 1), parameters('numberOfAdditionalNics'), 1)]",
                "name": "addtlniccopy0"
            },
            "dependsOn": [
                "[variables('mgmtNsgID')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('addtlNicName'), copyIndex(1), '0')]",
            "properties": {
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(variables('vnetId'), '/subnets/', variables('addtlNicRefSplit')[copyIndex()])]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "condition": "[greaterOrEquals(parameters('numberOfAdditionalNics'), 1)]",
            "copy": {
                "count": "[if(greaterOrEquals(parameters('numberOfAdditionalNics'), 1), parameters('numberOfAdditionalNics'), 1)]",
                "name": "addtlniccopy1"
            },
            "dependsOn": [
                "[variables('mgmtNsgID')]"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('addtlNicName'), copyIndex(1), '1')]",
            "properties": {
                "enableAcceleratedNetworking": "[variables('isAcceleratedNetworkingSupported')]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(variables('vnetId'), '/subnets/', variables('addtlNicRefSplit')[copyIndex()])]"
                            }
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "name": "[concat(variables('dnsLabel'), '-mgmt-nsg')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "mgmt_allow_https",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "[variables('bigIpMgmtPort')]",
                            "direction": "Inbound",
                            "priority": 101,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "ssh_allow_22",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22",
                            "direction": "Inbound",
                            "priority": 102,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkSecurityGroups"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "name": "[concat(variables('dnsLabel'), '-ext-nsg')]",
            "properties": {
                "securityRules": []
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkSecurityGroups"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "name": "[variables('availabilitySetName')]",
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "PlatformFaultDomainCount": 2,
                "PlatformUpdateDomainCount": 2
            },
            "condition": "[not(variables('zonesAvailable'))]",
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/availabilitySets"
        },
        {
            "apiVersion": "[variables('storageApiVersion')]",
            "kind": "Storage",
            "location": "[variables('location')]",
            "name": "[variables('newDataStorageAccountName')]",
            "properties": {
                "supportsHttpsTrafficOnly": true
            },
            "sku": {
                "name": "[variables('dataStorageAccountType')]",
                "tier": "Standard"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Storage/storageAccounts"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "condition": "[and(variables('useCustomImage'), variables('createNewCustomImage'))]",
            "location": "[variables('location')]",
            "name": "[variables('newCustomImageName')]",
            "properties": {
                "storageProfile": {
                    "osDisk": {
                        "blobUri": "[variables('customImage')]",
                        "osState": "Generalized",
                        "osType": "Linux",
                        "storageAccountType": "[if(contains(variables('premiumInstanceArray'), parameters('instanceType')), 'Premium_LRS', 'Standard_LRS')]"
                    }
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/images"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "bigipTemplate",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
                "[variables('newCustomImageName')]",
                "addtlniccopy0",
                "addtlniccopy1",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '0')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '0')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '0')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '1')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '1')]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '1')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateBaseUrl'), 'templates/f5-azure-arm-templates/examples/modules/failover/bigip.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sshKey":{ "value": "[parameters('sshKey')]" },
                    "adminUsername":{ "value": "[parameters('adminUsername')]" },
                    "addtlNicConfigArray":{ "value": "[variables('addtlNicConfigArray')]" },
                    "availabilitySetId":{ "value": "[variables('availabilitySetId')]" },
                    "dnsLabel":{ "value": "[variables('dnsLabel')]" },
                    "imagePlan":{ "value": "[variables('imagePlan')]" },
                    "instanceName":{ "value": "[variables('instanceName')]" },
                    "instanceType":{ "value": "[parameters('instanceType')]" },
                    "licenseKey1":{ "value": "[parameters('licenseKey1')]" },
                    "licenseKey2":{ "value": "[parameters('licenseKey2')]" },
                    "location":{ "value": "[variables('location')]" },
                    "newDataStorageAccountName":{ "value": "[variables('newDataStorageAccountName')]" },
                    "numberOfAdditionalNics":{ "value": "[parameters('numberOfAdditionalNics')]" },
                    "selfNicConfigArray":{ "value": "[variables('selfNicConfigArray')]" },
                    "storageProfileArray":{ "value": "[variables('storageProfileArray')]" },
                    "tagValues":{ "value": "[variables('tagValues')]" },
                    "useCustomImage":{ "value": "[variables('useCustomImage')]" },
                    "zonesAvailable":{ "value": "[variables('zonesAvailable')]" }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "condition": "[equals(parameters('provisionApp'),'Yes')]",
            "apiVersion": "2017-05-10",
            "name": "appTemplate",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('newDataStorageAccountName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateBaseUrl'), 'templates/f5-azure-arm-templates/examples/app.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                }
            }
        }
    ],
    "outputs": {
        "GUI-URL": {
            "type": "string",
            "value": "[if(equals(parameters('provisionPublicIP'),'No'), concat('https://',reference(concat(variables('mgmtNicId'), '0')).ipConfigurations[0].properties.privateIPAddress, ':', variables('bigIpMgmtPort')), concat('https://',reference(concat(variables('mgmtPublicIPAddressId'), '0')).dnsSettings.fqdn, ':', variables('bigIpMgmtPort')))]"
        },
        "SSH-URL": {
            "type": "string",
            "value": "[if(equals(parameters('provisionPublicIP'),'No'), concat(reference(concat(variables('mgmtNicId'), '0')).ipConfigurations[0].properties.privateIPAddress,' ',22), concat('https://',reference(concat(variables('mgmtPublicIPAddressId'), '0')).dnsSettings.fqdn, ':', variables('bigIpMgmtPort')))]"
        }
    }
}