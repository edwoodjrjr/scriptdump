{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "sshKey": {
            "type": "string"
        },
        "adminUsername": {
            "type": "string"
        },
        "newDataStorageAccountName": {
            "type": "string"
        },
        "location": {
            "type": "string"
        },
        "vmssName": {
            "type": "string"
        },
        "useCustomImage": {
            "type": "string"
        },
        "imagePlan": {
            "type": "string"
        },
        "loadBalancerBackendAddressPoolsArray": {
            "type": "array"
        },
        "attachInternalLoadBalancer": {
            "type": "string"
        },
        "subscriptionID": {
            "type": "string"
        },
        "externalLoadBalancerName": {
            "type": "string"
        },
        "provisionPublicIP": {
            "type": "string"
        },
        "publicIpAddressConfiguration": {
            "type": "string"
        },
        "mgmtSubnetId": {
            "type": "string"
        },
        "authenticationType": {
            "type": "string"
        },
        "storageProfileArray": {
            "type": "array"
        },
        "vmScaleSetMinCount": {
            "type": "string"
        },
        "instanceType": {
            "type": "string"
        },
        "tagValues": {
            "type": "object"
        },
        "useAvailabilityZones": {
            "type": "string"
        }
    },
    "variables": {
        "computeApiVersion": "2017-12-01",
        "userData": "[concat('#cloud-init\n\nwrite_files:\n  - path: /config/cloud/onboard_config.yaml\n    permissions: 0755\n    owner: root:root\n    content: |\n        runtime_parameters:\n        - name: 'INTERFACE_NAME'\n          type: url\n          url: http://169.254.169.254/metadata/interfaces\n          nestedData: '[0].name'\n        - name: 'TS_ACCESS_KEY'\n          type: vault\n          vaultProvider: KMS\n          key: my_ts_access_key\n    extension_packages:\n        install_operations:\n            - extensionType: DO\n            extensionVersion: 1.5.0\n            - extensionType: AS3\n            extensionVersion: 1.10.0\n            - extensionType: TS\n            extensionVersion: latest\n    extension_services:\n        service_operations:\n            - extensionType: DO\n            type: file\n            value: /config/cloud/do_declaration.json\n            - extensionType: AS3\n            type: url\n            value: !Ref AS3DeclarationUrl\n            - extensionType: TS\n            type: providerStorage\n            value: s3://TSDeclarationUrl.json\nruncmd:\n    curl --verify True https://cdn.f5.com/product/cloudsolutions/solution-scripts/install.sh | bash\n    f5-onboarder -c /config/cloud/onboard_config.yaml')]"
    },
    "resources": [
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('newDataStorageAccountName'))]"
            ],
            "location": "[parameters('location')]",
            "name": "[parameters('vmssName')]",
            "plan": "[if(parameters('useCustomImage'), json('null'), parameters('imagePlan'))]",
            "properties": {
                "overprovision": false,
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "virtualMachineProfile": {
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "nic1",
                                "properties": {
                                    "ipConfigurations": [
                                        {
                                            "name": "ipconfig1",
                                            "properties": {
                                                "loadBalancerBackendAddressPools": "[take(parameters('loadBalancerBackendAddressPoolsArray'), if(parameters('attachInternalLoadBalancer'), 2, 1))]",
                                                "loadBalancerInboundNatPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', parameters('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', parameters('externalLoadBalancerName'), '/inboundNatPools/sshnatpool')]"
                                                    },
                                                    {
                                                        "id": "[concat('/subscriptions/', parameters('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', parameters('externalLoadBalancerName'), '/inboundNatPools/mgmtnatpool')]"
                                                    }
                                                ],
                                                "publicIpAddressConfiguration": "[if(equals(toLower(parameters('provisionPublicIP')), 'no'), json('null'), parameters('publicIpAddressConfiguration'))]",
                                                "subnet": {
                                                    "id": "[parameters('mgmtSubnetId')]"
                                                }
                                            }
                                        }
                                    ],
                                    "networkSecurityGroup": {
                                        "id": "[parameters('mgmtNsgID')]"
                                    },
                                    "primary": true
                                }
                            }
                        ]
                    },
                    "osProfile": {
                        "adminUsername": "[parameters('adminUsername')]",
                        "computerNamePrefix": "[parameters('vmssName')]",
                        "linuxConfiguration": {
                            "disablePasswordAuthentication": true,
                            "ssh": {
                                "publicKeys": [
                                    {
                                        "keyData": "[parameters('sshKey')]",
                                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                                    }
                                ]
                            }
                        },
                        "customData": "[base64(concat('#cloud-init\n\n write_files:\n - path: /config/cloud/onboard_config.yaml\n permissions: 0755\n owner: root:root\n content: |\n runtime_parameters:\n - name: TS_ACCESS_KEY\n type: vault\n vaultProvider: KMS\n key: my_ts_access_key\n extension_packages:\n install_operations:\n - extensionType: DO\n extensionVersion: latest\n - extensionType: AS3\n extensionVersion: latest\n - extensionType: TS\n extensionVersion: latest\n extension_services:\n service_operations:\n - extensionType: DO\n type: url\n value: !Ref DODeclarationUrl\n runcmd:\n curl --verify True https://cdn.f5.com/product/cloudsolutions/solution-scripts/install.sh | bash\n f5-onboarder -c /config/cloud/onboard_config.yaml'))]"
                    },
                    "storageProfile": "[if(parameters('useCustomImage'), parameters('storageProfileArray').customImage, parameters('storageProfileArray').platformImage)]"
                }
            },
            "sku": {
                "capacity": "[parameters('vmScaleSetMinCount')]",
                "name": "[parameters('instanceType')]",
                "tier": "Standard"
            },
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "zones": "[if(parameters('useAvailabilityZones'), createArray(1, 2, 3), json('null'))]",
            "type": "Microsoft.Compute/virtualMachineScaleSets"
        }
    ],
    "outputs": {
    }
  }