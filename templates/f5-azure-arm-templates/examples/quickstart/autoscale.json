{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "7.2.0.0",
    "parameters": {
        "templateBaseUrl": {
            "allowedValues": [
                "https://raw.githubusercontent.com/edwoodjrjr/scriptdump/master/",
                "https://cdn.f5.com/product/cloudsolutions/"
            ],
            "defaultValue": "https://raw.githubusercontent.com/edwoodjrjr/scriptdump/master/",
            "metadata": {
                "description": "Location where linked templates are stored."
            },
            "type": "string"
        },
        "adminUsername": {
            "defaultValue": "azureuser",
            "metadata": {
                "description": "User name for the Virtual Machine."
            },
            "type": "string"
        },
        "sshKey": {
            "metadata": {
                "description": "Password or SSH public key to login to the Virtual Machine. Note: There are a number of special characters that you should avoid using for F5 product user accounts.  See [K2873](https://support.f5.com/csp/article/K2873) for details. Note: If using key-based authentication, this should be the public key as a string, typically starting with **---- BEGIN SSH2 PUBLIC KEY ----** and ending with **---- END SSH2 PUBLIC KEY ----**."
            },
            "type": "securestring"
        },
        "dnsLabel": {
            "metadata": {
                "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine."
            },
            "type": "string"
        },
        "instanceType": {
            "allowedValues": [
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_D15_v2",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS11_v2",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_DS15_v2",
                "Standard_F4",
                "Standard_F8",
                "Standard_F2S",
                "Standard_F4S",
                "Standard_F8S",
                "Standard_F16S",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5"
            ],
            "defaultValue": "Standard_DS4_v2",
            "metadata": {
                "description": "Instance size of the Virtual Machine."
            },
            "type": "string"
        },
        "imageName": {
            "allowedValues": [
                "Best25Mbps",
                "Best200Mbps",
                "Best1Gbps",
                "Best10Gbps",
                "AdvancedWaf25Mbps",
                "AdvancedWaf200Mbps",
                "AdvancedWaf1Gbps",
                "PerAppVeAdvancedWaf25Mbps",
                "PerAppVeAdvancedWaf200Mbps"
            ],
            "defaultValue": "Best1Gbps",
            "metadata": {
                "description": "F5 SKU (image) you want to deploy. Note: The disk size of the VM will be determined based on the option you select.  **Important**: 10Gbps SKUs are supported only with BIGIP VE v15 or later. If intending to provision multiple modules, ensure the appropriate value is selected, such as **Best** instead of **Good**."
            },
            "type": "string"
        },
        "bigIpVersion": {
            "allowedValues": [
                "15.0.100000",
                "14.1.200000",
                "latest"
            ],
            "defaultValue": "15.0.100000",
            "metadata": {
                "description": "F5 BIG-IP version you want to use."
            },
            "type": "string"
        },
        "vnetName": {
            "metadata": {
                "description": "The name of the existing virtual network to which you want to connect the BIG-IP VEs."
            },
            "type": "string"
        },
        "vnetResourceGroupName": {
            "metadata": {
                "description": "The name of the resource group that contains the Virtual Network where the BIG-IP VE will be placed."
            },
            "type": "string"
        },
        "mgmtSubnetName": {
            "metadata": {
                "description": "Name of the existing mgmt subnet - with external access to the Internet. **Important**: The subnet you provide for the mgmt NIC **must** be unique."
            },
            "type": "string"
        },
        "customImage": {
            "defaultValue": "OPTIONAL",
            "metadata": {
                "description": "If you would like to deploy using a local BIG-IP image, provide either the full URL to the VHD in Azure storage **or** the full resource ID to an existing Microsoft.Compute image resource.  **Note**: Unless specifically required, leave the default of **OPTIONAL**."
            },
            "type": "string"
        },
        "restrictedSrcAddress": {
            "defaultValue": "*",
            "metadata": {
                "description": "This field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources"
            },
            "type": "string"
        },
        "tagValues": {
            "defaultValue": {
                "application": "APP",
                "cost": "COST",
                "environment": "ENV",
                "group": "GROUP",
                "owner": "OWNER"
            },
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            },
            "type": "object"
        },
        "vmScaleSetMinCount": {
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "defaultValue": 2,
            "metadata": {
                "description": "The minimum (and default) number of BIG-IP VEs that will be deployed into the VM Scale Set."
            },
            "type": "int"
        },
        "vmScaleSetMaxCount": {
            "allowedValues": [
                2,
                3,
                4,
                5,
                6,
                7,
                8
            ],
            "defaultValue": 4,
            "metadata": {
                "description": "The maximum number of BIG-IP VEs that can be deployed into the VM Scale Set."
            },
            "type": "int"
        },
        "appInsights": {
            "defaultValue": "CREATE_NEW",
            "metadata": {
                "description": "Enter the name of your existing Application Insights environment that will be used to receive custom BIG-IP metrics you can use for Scale Set rules and device visibility. If the Application Insights environment is in a different Resource Group than this deployment, specify it as **app_insights_name;app_insights_rg**).  If you do not have an Application Insights environment, leave the default (CREATE_NEW) and the template will create one. Note: By default, the new Application Insights environment will be created in **East US**, if necessary you can specify a different region as **CREATE_NEW:app_insights_region**)."
            },
            "type": "string"
        },
        "scaleOutCpuThreshold": {
            "defaultValue": 80,
            "maxValue": 100,
            "metadata": {
                "description": "The percentage of CPU utilization that should trigger a scale out event."
            },
            "minValue": 1,
            "type": "int"
        },
        "scaleInCpuThreshold": {
            "defaultValue": 20,
            "maxValue": 100,
            "metadata": {
                "description": "The percentage of CPU utilization that should trigger a scale in event."
            },
            "minValue": 1,
            "type": "int"
        },
        "scaleOutThroughputThreshold": {
            "defaultValue": 20000000,
            "metadata": {
                "description": "The amount of throughput (**bytes**) that should trigger a scale out event. Note: The default value is equal to 20 MB"
            },
            "type": "int"
        },
        "scaleInThroughputThreshold": {
            "defaultValue": 10000000,
            "metadata": {
                "description": "The amount of throughput (**bytes**) that should trigger a scale in event. Note: The default value is equal to 10 MB"
            },
            "type": "int"
        },
        "scaleOutTimeWindow": {
            "defaultValue": 10,
            "maxValue": 60,
            "metadata": {
                "description": "The time window required to trigger a scale out event. This is used to determine the amount of time needed for a threshold to be breached, as well as to prevent excessive scaling events (flapping). **Note:** Allowed values are 1-60 (minutes)."
            },
            "minValue": 1,
            "type": "int"
        },
        "scaleInTimeWindow": {
            "defaultValue": 10,
            "maxValue": 60,
            "metadata": {
                "description": "The time window required to trigger a scale in event. This is used to determine the amount of time needed for a threshold to be breached, as well as to prevent excessive scaling events (flapping). **Note:** Allowed values are 1-60 (minutes)."
            },
            "minValue": 1,
            "type": "int"
        },
        "notificationEmail": {
            "defaultValue": "OPTIONAL",
            "metadata": {
                "description": "If you want email notifications on scale events, specify an email address, otherwise leave the parameter as **OPTIONAL**. Note: You can specify multiple emails by separating them with a semi-colon, such as *email@domain.com;email2@domain.com*."
            },
            "type": "string"
        },
        "mgmtNsgName": {
            "defaultValue": "OPTIONAL",
            "metadata": {
                "description": "If you would like to deploy using an existing Azure Network Security Group, provide the NSG name here.  **Note**: Unless specifically required, leave the default of **OPTIONAL**."
            },
            "type": "string"
        },
        "externalLoadBalancerName": {
            "defaultValue": "OPTIONAL",
            "metadata": {
                "description": "If you would like to deploy using an existing Azure Load Balancer (Standard SKU) with a backend pool called loadBalancerBackEnd, provide the ALB name here.  **Note**: Unless specifically required, leave the default of **OPTIONAL**."
            },
            "type": "string"
        },
        "internalLoadBalancerName": {
            "defaultValue": "OPTIONAL",
            "metadata": {
                "description": "If you would like to add instances to an existing internal Azure Load Balancer (Standard SKU) with a backend pool called loadBalancerBackEnd, provide the internal ALB name here.  **Note**: Unless specifically required, leave the default of **OPTIONAL**."
            },
            "type": "string"
        },
        "useAvailabilityZones": {
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes",
            "metadata": {
                "description": "This deployment can deploy resources into Azure Availability Zones (if the region supports it).  If that is not desired the input should be set 'No'."
            },
            "type": "string"
        },
        "autoscaleTimeout": {
            "defaultValue": 10,
            "maxValue": 10,
            "metadata": {
                "description": "The timeout value after which autoscale script execution will terminated"
            },
            "minValue": 3,
            "type": "int"
        },
        "provisionPublicIP": {
            "allowedValues": [
                "No",
                "Yes"
            ],
            "defaultValue": "Yes",
            "metadata": {
                "description": "Enabling management public IP(s) allows for direct public access to each BIG-IP VE that is created."
            },
            "type": "string"
        },
        "provisionApp": {
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "Choose yes to deploy app server resources."
            },
            "type": "string"
        },
        "customDoDeclarationUrl": {
            "defaultValue": "OPTIONAL",
            "metadata": {
                "description": "If you would like to use a custom DO declaraton for configuring BIG-IP, specify the URL here.  **Note**: To use the default recommended declaration, leave the default of **OPTIONAL**."
            },
            "type": "string"
        }, 
        "customAs3DeclarationUrl": {
            "defaultValue": "OPTIONAL",
            "metadata": {
                "description": "If you would like to use a custom AS3 declaraton for configuring BIG-IP, specify the URL here.  **Note**: To use the default recommended declaration, leave the default of **OPTIONAL**."
            },
            "type": "string"
        }
    },
    "variables": {
        "dODeclarationUrl": "[replace(parameters('customDoDeclarationUrl'), 'OPTIONAL', concat(parameters('templateBaseUrl'), 'templates/f5-azure-arm-templates/examples/modules/autoscale/do.json'))]",
        "as3DeclarationUrl": "[replace(parameters('customAs3DeclarationUrl'), 'OPTIONAL', concat(parameters('templateBaseUrl'), 'templates/f5-azure-arm-templates/examples/modules/autoscale/as3.json'))]",
        "bigIpNicPortMap": {
            "1": {
                "Port": "[parameters('bigIpVersion')]"
            },
            "2": {
                "Port": "443"
            },
            "3": {
                "Port": "443"
            },
            "4": {
                "Port": "443"
            },
            "5": {
                "Port": "443"
            },
            "6": {
                "Port": "443"
            }
        },
        "bigIpVersionPortMap": {
            "15.0.100000": {
                "Port": 8443
            },
            "14.1.200000": {
                "Port": 8443
            },
            "443": {
                "Port": 443
            },
            "latest": {
                "Port": 8443
            }
        },
        "computeApiVersion": "2017-12-01",
        "networkApiVersion": "2017-11-01",
        "storageApiVersion": "2017-10-01",
        "customImage": "[replace(parameters('customImage'), 'OPTIONAL', '')]",
        "useCustomImage": "[not(empty(variables('customImage')))]",
        "createNewCustomImage": "[contains(variables('customImage'), 'https://')]",
        "newCustomImageName": "[concat(variables('dnsLabel'), 'image')]",
        "storageProfileArray": {
            "customImage": {
                "imageReference": {
                    "id": "[if(variables('createNewCustomImage'), resourceId('Microsoft.Compute/images', variables('newCustomImageName')), variables('customImage'))]"
                }
            },
            "platformImage": {
                "imageReference": "[variables('imageReference')]",
                "osDisk": {
                    "createOption": "FromImage"
                }
            }
        },
        "premiumInstanceArray": [
            "Standard_DS2",
            "Standard_DS3",
            "Standard_DS4",
            "Standard_DS11",
            "Standard_DS12",
            "Standard_DS13",
            "Standard_DS14",
            "Standard_DS2_v2",
            "Standard_DS3_v2",
            "Standard_DS4_v2",
            "Standard_DS5_v2",
            "Standard_DS11_v2",
            "Standard_DS12_v2",
            "Standard_DS13_v2",
            "Standard_DS14_v2",
            "Standard_DS15_v2",
            "Standard_F2S",
            "Standard_F4S",
            "Standard_F8S",
            "Standard_F16S",
            "Standard_GS2",
            "Standard_GS3",
            "Standard_GS4",
            "Standard_GS5"
        ],
        "location": "[resourceGroup().location]",
        "sshKey": "[replace(parameters('sshKey'),'\\n', '\n')]",
        "subscriptionID": "[subscription().subscriptionId]",
        "resourceGroupName": "[resourceGroup().name]",
        "f5NetworksTag": "v7.2.0.0",
        "dnsLabel": "[toLower(parameters('dnsLabel'))]",
        "imageNameToLower": "[toLower(parameters('imageName'))]",
        "skuToUse": "[variables('paygImageMap')[variables('imageNameToLower')]['sku']]",
        "offerToUse": "[variables('paygImageMap')[variables('imageNameToLower')]['offer']]",
        "imagePlan": {
            "name": "[variables('skuToUse')]",
            "product": "[variables('offerToUse')]",
            "publisher": "f5-networks"
        },
        "imageReference": {
            "offer": "[variables('offerToUse')]",
            "publisher": "f5-networks",
            "sku": "[variables('skuToUse')]",
            "version": "[parameters('bigIpVersion')]"
        },
        "bigIpNicPortValue": "[variables('bigIpNicPortMap')['1'].Port]",
        "bigIpMgmtPort": 8443,
        "virtualNetworkName": "[parameters('vnetName')]",
        "mgmtSubnetName": "[parameters('mgmtSubnetName')]",
        "vnetId": "[resourceId(parameters('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "availabilitySetName": "[concat(variables('dnsLabel'), '-avset')]",
        "zoneMappings": "[replace(toLower(string(providers('Microsoft.Compute', 'virtualMachines').zoneMappings)), ' ', '')]",
        "southcentralus": "[equals(variables('location'), string('southcentralus'))]",
        "southafricanorth": "[equals(variables('location'), string('southafricanorth'))]",
        "australiaeast": "[equals(variables('location'), string('australiaeast'))]",
        "zonesAvailable": "[and(contains(variables('zoneMappings'), concat('\"', variables('location'), '\"')), not(variables('southcentralus')), not(variables('southafricanorth')), not(variables('australiaeast')))]",
        "availabilitySetId": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "paygImageMap": {
            "advancedwaf1gbps": {
                "offer": "f5-big-ip-advanced-waf",
                "sku": "f5-bigip-virtual-edition-1g-waf-hourly"
            },
            "advancedwaf200mbps": {
                "offer": "f5-big-ip-advanced-waf",
                "sku": "f5-bigip-virtual-edition-200m-waf-hourly"
            },
            "advancedwaf25mbps": {
                "offer": "f5-big-ip-advanced-waf",
                "sku": "f5-bigip-virtual-edition-25m-waf-hourly"
            },
            "best1gbps": {
                "offer": "f5-big-ip-best",
                "sku": "f5-bigip-virtual-edition-1g-best-hourly"
            },
            "best10gbps": {
                "offer": "f5-big-ip-best",
                "sku": "f5-bigip-virtual-edition-10g-best-hourly"
            },
            "best200mbps": {
                "offer": "f5-big-ip-best",
                "sku": "f5-bigip-virtual-edition-200m-best-hourly"
            },
            "best25mbps": {
                "offer": "f5-big-ip-best",
                "sku": "f5-bigip-virtual-edition-25m-best-hourly"
            },
            "better1gbps": {
                "offer": "f5-big-ip-better",
                "sku": "f5-bigip-virtual-edition-1g-better-hourly"
            },
            "better10gbps": {
                "offer": "f5-big-ip-better",
                "sku": "f5-bigip-virtual-edition-10g-better-hourly"
            },
            "better200mbps": {
                "offer": "f5-big-ip-better",
                "sku": "f5-bigip-virtual-edition-200m-better-hourly"
            },
            "better25mbps": {
                "offer": "f5-big-ip-better",
                "sku": "f5-bigip-virtual-edition-25m-better-hourly"
            },
            "good1gbps": {
                "offer": "f5-big-ip-good",
                "sku": "f5-bigip-virtual-edition-1g-good-hourly"
            },
            "good10gbps": {
                "offer": "f5-big-ip-good",
                "sku": "f5-bigip-virtual-edition-10g-good-hourly"
            },
            "good200mbps": {
                "offer": "f5-big-ip-good",
                "sku": "f5-bigip-virtual-edition-200m-good-hourly"
            },
            "good25mbps": {
                "offer": "f5-big-ip-good",
                "sku": "f5-bigip-virtual-edition-25m-good-hourly"
            },
            "perappveadvancedwaf200mbps": {
                "offer": "f5-big-ip-per-app-ve",
                "sku": "f5-big-ip-per-app-ve-awf-200m-hourly"
            },
            "perappveadvancedwaf25mbps": {
                "offer": "f5-big-ip-per-app-ve",
                "sku": "f5-big-ip-per-app-ve-awf-25m-hourly"
            },
            "perappveltm200mbps": {
                "offer": "f5-big-ip-per-app-ve",
                "sku": "f5-big-ip-per-app-ve-ltm-200m-hourly"
            },
            "perappveltm25mbps": {
                "offer": "f5-big-ip-per-app-ve",
                "sku": "f5-big-ip-per-app-ve-ltm-25m-hourly"
            }
        },
        "externalLoadBalancerName": "[if(variables('useExistingLoadBalancer'), parameters('externalLoadBalancerName'), concat(variables('dnsLabel'),'-ext-alb'))]",
        "extLbId": "[resourceId('Microsoft.Network/loadBalancers',variables('externalLoadBalancerName'))]",
        "deviceNamePrefix": "[concat(variables('dnsLabel'),'-device')]",
        "frontEndIPConfigID": "[concat(variables('extLbId'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
        "attachInternalLoadBalancer": "[not(empty(replace(parameters('internalLoadBalancerName'), 'OPTIONAL', '')))]",
        "internalLoadBalancerName": "[parameters('internalLoadBalancerName')]",
        "useExistingLoadBalancer": "[not(empty(replace(parameters('externalLoadBalancerName'), 'OPTIONAL', '')))]",
        "loadBalancerBackendAddressPoolsArray": [
            {
                "id": "[concat('/subscriptions/', variables('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('externalLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
            },
            {
                "id": "[concat('/subscriptions/', variables('subscriptionID'),'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('internalLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
            }
        ],
        "useExistingNsg": "[not(empty(replace(parameters('mgmtNsgName'), 'OPTIONAL', '')))]",
        "mgmtNsgName": "[if(variables('useExistingNsg'), parameters('mgmtNsgName'), concat(variables('dnsLabel'),'-mgmt-nsg'))]",
        "appInsightsApiVersion": "2015-04-01",
        "appInsightsComponentsApiVersion": "2015-05-01",
        "useAvailabilityZones": "[and(variables('zonesAvailable'), equals(parameters('useAvailabilityZones'), 'Yes'))]",
        "vmssName": "[concat(parameters('dnsLabel'),'-vmss')]",
        "vmssId": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', variables('vmssName'))]",
        "defaultAppInsightsLocation": "eastus",
        "appInsightsLocation": "[split(concat(parameters('appInsights'), ':', variables('defaultAppInsightsLocation')), ':')[1]]",
        "appInsightsName": "[replace(split(parameters('appInsights'), ':')[0], 'CREATE_NEW', concat(deployment().name, '-appinsights'))]",
        "appInsightsNameArray": "[split(concat(variables('appInsightsName'), ';', variables('resourceGroupName')) , ';')]",
        "scaleOutTimeWindow": "[concat('PT', parameters('scaleOutTimeWindow'), 'M')]",
        "scaleInTimeWindow": "[concat('PT', parameters('scaleInTimeWindow'), 'M')]",
        "cpuMetricName": "HOST_CPU",
        "throughputMetricName": "HOST_Traffic",
        "scaleMetricMap": {
            "HOST_CPU": {
                "metricName": "Percentage CPU",
                "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]",
                "thresholdIn": "[parameters('scaleInCpuThreshold')]",
                "thresholdOut": "[parameters('scaleOutCpuThreshold')]"
            },
            "HOST_Traffic": {
                "metricName": "Network In",
                "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]",
                "thresholdIn": "[parameters('scaleInThroughputThreshold')]",
                "thresholdOut": "[parameters('scaleOutThroughputThreshold')]"
            },
            "F5_TMM_CPU": {
                "metricName": "Percentage CPU",
                "metricResourceUri": "[resourceId(variables('appInsightsNameArray')[1], 'Microsoft.Insights/components', variables('appInsightsNameArray')[0])]",
                "thresholdIn": "[parameters('scaleInCpuThreshold')]",
                "thresholdOut": "[parameters('scaleOutCpuThreshold')]"
            },
            "F5_TMM_Traffic": {
                "metricName": "Network In",
                "metricResourceUri": "[resourceId(variables('appInsightsNameArray')[1], 'Microsoft.Insights/components', variables('appInsightsNameArray')[0])]",
                "thresholdIn": "[parameters('scaleInThroughputThreshold')]",
                "thresholdOut": "[parameters('scaleOutThroughputThreshold')]"
            }
        },
        "customEmailBaseArray": [
            ""
        ],
        "customEmail": "[skip(union(variables('customEmailBaseArray'), split(replace(parameters('notificationEmail'), 'OPTIONAL', ''), ';')), 1)]",
        "publicIpAddressConfiguration": {
            "name": "publicIp01",
            "properties": {
                "idleTimeoutInMinutes": 15
            }
        },
        "lbTcpProbeNameHttp": "tcp_probe_http",
        "lbTcpProbeIdHttp": "[concat(variables('extLbId'),'/probes/',variables('lbTcpProbeNameHttp'))]",
        "lbTcpProbeNameHttps": "tcp_probe_https",
        "lbTcpProbeIdHttps": "[concat(variables('extLbId'),'/probes/',variables('lbTcpProbeNameHttps'))]",
        "f5NetworksSolutionScripts": "[concat('http://cdn.f5.com/product/cloudsolutions/solution-scripts/')]",
        "publicIPAddressType": "Static",
        "mgmtPublicIPAddressName": "[concat(variables('dnsLabel'), '-mgmt-pip')]",
        "mgmtPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('mgmtPublicIPAddressName'))]",
        "mgmtNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',variables('mgmtNsgName'))]",
        "mgmtNicName": "[concat(variables('dnsLabel'), '-mgmt')]",
        "mgmtNicID": "[resourceId('Microsoft.Network/NetworkInterfaces', variables('mgmtNicName'))]",
        "mgmtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('mgmtSubnetName'))]",
        "tagValues": "[parameters('tagValues')]",
        "newDataStorageAccountName": "[concat(uniqueString(variables('dnsLabel'), resourceGroup().id, deployment().name), 'data000')]",
        "dataStorageAccountType": "Standard_LRS",
        "deploymentId": "[concat(variables('subscriptionId'), resourceGroup().id, deployment().name, variables('dnsLabel'))]"
    },
    "resources": [
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "sku": {
                "name": "Standard"
            },
            "location": "[variables('location')]",
            "name": "[variables('mgmtPublicIPAddressName')]",
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsLabel')]"
                },
                "idleTimeoutInMinutes": 30,
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "name": "[variables('mgmtNsgName')]",
            "condition": "[not(variables('useExistingNsg'))]",
            "properties": {
                "securityRules": [
                    {
                        "name": "mgmt_allow_https",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "[variables('bigIpMgmtPort')]",
                            "direction": "Inbound",
                            "priority": 101,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "ssh_allow_22",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22",
                            "direction": "Inbound",
                            "priority": 102,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "app_allow_http",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "80",
                            "direction": "Inbound",
                            "priority": 110,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "app_allow_https",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443",
                            "direction": "Inbound",
                            "priority": 111,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allow_loadBalancer_traffic",
                        "properties": {
                            "access": "Allow",
                            "description": "",
                            "destinationAddressPrefix": "AzureLoadBalancer",
                            "destinationPortRange": "*",
                            "direction": "Outbound",
                            "priority": 110,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "disallow_inbound_traffic",
                        "properties": {
                            "access": "[if(equals(parameters('provisionPublicIP'), 'No'), 'Deny', 'Allow')]",
                            "description": "",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "*",
                            "direction": "Inbound",
                            "priority": 113,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "Internet",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Network/networkSecurityGroups"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "condition": "[not(variables('useExistingLoadBalancer'))]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'))]"
            ],
            "location": "[variables('location')]",
            "name": "[variables('externalLoadBalancerName')]",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "loadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('mgmtPublicIPAddressId')]"
                            }
                        }
                    }
                ],
                "inboundNatPools": [
                    {
                        "name": "sshnatpool",
                        "properties": {
                            "backendPort": 22,
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            },
                            "frontendPortRangeEnd": 50100,
                            "frontendPortRangeStart": 50001,
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "mgmtnatpool",
                        "properties": {
                            "backendPort": "[variables('bigIpMgmtPort')]",
                            "frontendIPConfiguration": {
                                "id": "[variables('frontEndIPConfigID')]"
                            },
                            "frontendPortRangeEnd": 50200,
                            "frontendPortRangeStart": 50101,
                            "protocol": "Tcp"
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "Name": "app-http",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "backendPort": 80,
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "frontendPort": 80,
                            "idleTimeoutInMinutes": 15,
                            "probe": {
                                "id": "[variables('lbTcpProbeIdHttp')]"
                            },
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "Name": "app-https",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "backendPort": 443,
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "frontendPort": 443,
                            "idleTimeoutInMinutes": 15,
                            "probe": {
                                "id": "[variables('lbTcpProbeIdHttps')]"
                            },
                            "protocol": "Tcp"
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "[variables('lbTcpProbeNameHttp')]",
                        "properties": {
                            "intervalInSeconds": 15,
                            "numberOfProbes": 3,
                            "port": "80",
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "[variables('lbTcpProbeNameHttps')]",
                        "properties": {
                            "intervalInSeconds": 15,
                            "numberOfProbes": 3,
                            "port": "443",
                            "protocol": "Tcp"
                        }
                    }
                ]
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "sku": {
                "name": "Standard"
            },
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "apiVersion": "[variables('storageApiVersion')]",
            "kind": "Storage",
            "location": "[variables('location')]",
            "name": "[variables('newDataStorageAccountName')]",
            "properties": {
                "supportsHttpsTrafficOnly": true
            },
            "sku": {
                "name": "[variables('dataStorageAccountType')]",
                "tier": "Standard"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Storage/storageAccounts"
        },
        {
            "apiVersion": "[variables('computeApiVersion')]",
            "condition": "[and(variables('useCustomImage'), variables('createNewCustomImage'))]",
            "location": "[variables('location')]",
            "name": "[variables('newCustomImageName')]",
            "properties": {
                "storageProfile": {
                    "osDisk": {
                        "blobUri": "[variables('customImage')]",
                        "osState": "Generalized",
                        "osType": "Linux",
                        "storageAccountType": "[if(contains(variables('premiumInstanceArray'), parameters('instanceType')), 'Premium_LRS', 'Standard_LRS')]"
                    }
                }
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Compute/images"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "bigipTemplate",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
                "[variables('externalLoadBalancerName')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateBaseUrl'), 'templates/f5-azure-arm-templates/examples/modules/autoscale/bigip.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "as3DeclarationUrl":{ "value": "[variables('as3DeclarationUrl')]" },
                    "sshKey":{ "value": "[parameters('sshKey')]" },
                    "adminUsername":{ "value": "[parameters('adminUsername')]" },
                    "attachInternalLoadBalancer":{ "value": "[variables('attachInternalLoadBalancer')]" },
                    "dODeclarationUrl":{ "value": "[variables('dODeclarationUrl')]" },
                    "externalLoadBalancerName":{ "value": "[variables('externalLoadBalancerName')]" },
                    "imagePlan":{ "value": "[variables('imagePlan')]" },
                    "instanceType":{ "value": "[parameters('instanceType')]" },
                    "loadBalancerBackendAddressPoolsArray":{ "value": "[variables('loadBalancerBackendAddressPoolsArray')]" },
                    "location":{ "value": "[variables('location')]" },
                    "mgmtNsgId":{ "value": "[variables('mgmtNsgId')]" },
                    "mgmtSubnetId":{ "value": "[variables('mgmtSubnetId')]" },
                    "provisionPublicIP":{ "value": "[parameters('provisionPublicIP')]" },
                    "publicIpAddressConfiguration":{ "value": "[variables('publicIpAddressConfiguration')]" },
                    "storageProfileArray":{ "value": "[variables('storageProfileArray')]" },
                    "subscriptionID":{ "value": "[variables('subscriptionID')]" },
                    "tagValues":{ "value": "[variables('tagValues')]" },
                    "useAvailabilityZones":{ "value": "[variables('useAvailabilityZones')]" },
                    "useCustomImage":{ "value": "[variables('useCustomImage')]" },
                    "vmScaleSetMinCount":{ "value": "[parameters('vmScaleSetMinCount')]" },
                    "vmssName":{ "value": "[variables('vmssName')]" }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "condition": "[equals(parameters('provisionApp'),'Yes')]",
            "apiVersion": "2017-05-10",
            "name": "appTemplate",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('templateBaseUrl'), 'templates/f5-azure-arm-templates/examples/app.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sshKey":{ "value": "[parameters('sshKey')]" },
                    "adminUsername":{ "value": "[parameters('adminUsername')]" },
                    "dnsLabel":{ "value": "[concat(variables('dnsLabel'), 'app')]" },
                    "storageAccountNamePrefix":{ "value": "[variables('dnsLabel')]" },
                    "mySqlPassword":{ "value": "[parameters('sshKey')]" },
                    "location":{ "value": "[variables('location')]" }
                }
            }
        },
        {
            "apiVersion": "[variables('appInsightsApiVersion')]",
            "dependsOn": [
                "bigipTemplate"
            ],
            "location": "[variables('location')]",
            "name": "[concat(variables('dnsLabel'), '-autoscaleconfig')]",
            "properties": {
                "enabled": true,
                "name": "[concat(variables('dnsLabel'), '-autoscaleconfig')]",
                "notifications": [
                    {
                        "email": {
                            "customEmails": "[variables('customEmail')]",
                            "sendToSubscriptionAdministrator": false,
                            "sendToSubscriptionCoAdministrators": false
                        },
                        "operation": "Scale",
                        "webhooks": []
                    }
                ],
                "profiles": [
                    {
                        "capacity": {
                            "default": "[parameters('vmScaleSetMinCount')]",
                            "maximum": "[parameters('vmScaleSetMaxCount')]",
                            "minimum": "[parameters('vmScaleSetMinCount')]"
                        },
                        "name": "Profile1",
                        "rules": [
                            {
                                "metricTrigger": {
                                    "metricName": "[variables('scaleMetricMap')[variables('cpuMetricName')].metricName]",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[variables('scaleMetricMap')[variables('cpuMetricName')].metricResourceUri]",
                                    "operator": "GreaterThan",
                                    "statistic": "Average",
                                    "threshold": "[variables('scaleMetricMap')[variables('cpuMetricName')].thresholdOut]",
                                    "timeAggregation": "Average",
                                    "timeGrain": "PT1M",
                                    "timeWindow": "[variables('scaleOutTimeWindow')]"
                                },
                                "scaleAction": {
                                    "cooldown": "PT1M",
                                    "direction": "Increase",
                                    "type": "ChangeCount",
                                    "value": "1"
                                }
                            },
                            {
                                "metricTrigger": {
                                    "metricName": "[variables('scaleMetricMap')[variables('cpuMetricName')].metricName]",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[variables('scaleMetricMap')[variables('cpuMetricName')].metricResourceUri]",
                                    "operator": "LessThan",
                                    "statistic": "Average",
                                    "threshold": "[variables('scaleMetricMap')[variables('cpuMetricName')].thresholdIn]",
                                    "timeAggregation": "Average",
                                    "timeGrain": "PT1M",
                                    "timeWindow": "[variables('scaleInTimeWindow')]"
                                },
                                "scaleAction": {
                                    "cooldown": "PT1M",
                                    "direction": "Decrease",
                                    "type": "ChangeCount",
                                    "value": "1"
                                }
                            },
                            {
                                "metricTrigger": {
                                    "metricName": "[variables('scaleMetricMap')[variables('throughputMetricName')].metricName]",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[variables('scaleMetricMap')[variables('throughputMetricName')].metricResourceUri]",
                                    "operator": "GreaterThan",
                                    "statistic": "Average",
                                    "threshold": "[variables('scaleMetricMap')[variables('throughputMetricName')].thresholdOut]",
                                    "timeAggregation": "Average",
                                    "timeGrain": "PT1M",
                                    "timeWindow": "[variables('scaleOutTimeWindow')]"
                                },
                                "scaleAction": {
                                    "cooldown": "PT1M",
                                    "direction": "Increase",
                                    "type": "ChangeCount",
                                    "value": "1"
                                }
                            },
                            {
                                "metricTrigger": {
                                    "metricName": "[variables('scaleMetricMap')[variables('throughputMetricName')].metricName]",
                                    "metricNamespace": "",
                                    "metricResourceUri": "[variables('scaleMetricMap')[variables('throughputMetricName')].metricResourceUri]",
                                    "operator": "LessThan",
                                    "statistic": "Average",
                                    "threshold": "[variables('scaleMetricMap')[variables('throughputMetricName')].thresholdIn]",
                                    "timeAggregation": "Average",
                                    "timeGrain": "PT1M",
                                    "timeWindow": "[variables('scaleInTimeWindow')]"
                                },
                                "scaleAction": {
                                    "cooldown": "PT1M",
                                    "direction": "Decrease",
                                    "type": "ChangeCount",
                                    "value": "1"
                                }
                            }
                        ]
                    }
                ],
                "targetResourceUri": "[variables('vmssId')]"
            },
            "type": "Microsoft.Insights/autoscaleSettings"
        },
        {
            "apiVersion": "[variables('appInsightsComponentsApiVersion')]",
            "condition": "[contains(toUpper(parameters('appInsights')), 'CREATE_NEW')]",
            "dependsOn": [],
            "kind": "other",
            "location": "[variables('appInsightsLocation')]",
            "name": "[variables('appInsightsName')]",
            "properties": {
                "ApplicationId": "[variables('appInsightsName')]",
                "Application_Type": "other"
            },
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
            "type": "Microsoft.Insights/components"
        }
    ],
    "outputs": {
        "GUI-URL": {
            "type": "string",
            "value": "[concat('https://',reference(variables('mgmtPublicIPAddressId')).dnsSettings.fqdn,':50101', ' - 50200')]"
        },
        "SSH-URL": {
            "type": "string",
            "value": "[concat(reference(variables('mgmtPublicIPAddressId')).dnsSettings.fqdn,' ',50001, ' - 50100')]"
        }
    }
}